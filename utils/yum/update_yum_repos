#!/bin/bash
#
# This script updates the metadata of all RPM repositories found under a root
# directory. A directory is considered a RPM repository if it contains RPM files.
# If the RPM repository is not yet configured as a YUM repository, metadata will
# be created.
#
# Written by Michel Jouvin - LAL/CNRS - 8/10/2009

force_update=0
sl5_compatible=0
verbose=0

usage () {
  echo "Usage:   $(basename $0) [--debug] [--force] [--nosl5|--sl5] repos_parent..."
  exit 1
}


update_metadata () {
  if [ -z "$1" ]
  then
    echo "Internal error: directory parameter missing"
    exit 10
  fi
  # Add a trailing / to directory in case this is a symlink
  local current_dir="$1/"
  [ ${verbose} -eq 1 ] && echo "Processing directory ${current_dir}..."

  local rpm_files=$(ls ${current_dir}/*-*.*.rpm 2>/dev/null)
  local is_repo_dir=0

  # Recursively process every subdirectory.
  # If a subdirectory contains repodata but RPMs in subdirectories, stop
  # processing it subdirectory (this is probably an OS-related repository or
  # a repository with a similar structure).
  # Variable is_repo_dir is used to flagged this type of repository.
  if [ ! -d "${current_dir}/repodata" -a \
       !  -d "${current_dir}/RPMS" -a \
       !  -d "${current_dir}/Packages" -a \
       !  -d "${current_dir}/SL" ]
  then
    is_repo_dir=0
    local repos_dirs=$(find -L ${current_dir} -maxdepth 1 -type d -or -type l | egrep -v "^${current_dir}\$")
    for repo_dir in ${repos_dirs}
    do
      update_metadata ${repo_dir}
    done
  else
    is_repo_dir=1
    # If the repository contains a 'comps' group filei in its metadata, assume that it is an OS repository
    # and don't update metadata. A SL (SL5 repository layout) is treated as a special (comps.xml is out
    # of the repo metadata).
    if [ -d "${current_dir}/repodata" ]
    then
      rpm_group_file=$(find ${current_dir}/repodata -name '*comps*.xml')
    elif [ -d "${current_dir}/SL" ]
    then
      echo "Skipping ${current_dir}: OS-related repository"
      return
    else
      [ ${verbose} -eq 1 ] && echo "${current_dir} is a YUM repo: do not check subdirectories..."
    fi
  fi

  # Rebuild metadata in the current directory if there is RPMs in it
  if [ -z "${rpm_files}" -a ${is_repo_dir} -eq 0 ]
  then
    #echo "$dir doesn't contain RPM files. Ignoring..."
    continue
  fi
  echo "Updating YUM metadata in '$current_dir'..."
  
  log_file=/tmp/$(basename $0)$(echo ${current_dir}|sed -e 's%/%_%g').err
  if [ -z "${rpm_group_file}" ]
  then
    rpm_group_file_opt=''
  else
    rpm_group_file_opt="--groupfile ${rpm_group_file}"
  fi
  cmd="createrepo ${createrepo_opts} ${rpm_group_file_opt} ${current_dir}"
  [ ${verbose} -eq 1 ] && echo "Executing command: ${cmd}"
  ${cmd} >/dev/null 2> ${log_file}
  if [ $? -ne 0 ]
  then
    echo "Failed to update YUM metadata in $current_dir (see ${log_file} for details"
  else
    if [ ! -s  ${log_file} ]
    then
      rm -f ${log_file}
    fi
  fi
}

while [ -n "$(echo $1 |grep '^-')" ]
do
  case $1 in
    --debug)
        verbose=1
        ;;

    -h|--help)
         usage
         ;;

    --force)
        force_update=1
        ;;

    --nosl5)
        sl5_compatible=0
        ;;

    --sl5)
        sl5_compatible=1
        ;;

    *)
         echo "Unsupported option ($1)"
         usage
         ;;
  esac
  shift
done

if [ -z "$1" ]
then
  echo "You need to specify parent directory of YUM repositories"
  usage
fi

createrepo_opts='--update --database'
if [ ${sl5_compatible} -eq 1 ]
then
  createrepo_opts="${createrepo_opts} -s sha"
fi

if [ ${force_update} -eq 0 ]
then
  createrepo_opts="${createrepo_opts} --checkts"
fi

trap "echo 'Update interrupted by CTRL/C';exit 2" INT

for repos_parent in $*
do
  if [ ! -d ${repos_parent} ]
  then
    echo "Error: ${repos_parent} is not a valid repository parent"
    continue
  fi

  update_metadata ${repos_parent}
done
